"Test your Knowledge" section

"Understanding Data Types"
1.
What type would you choose for the following ¡°numbers¡±?
A person¡¯s telephone number -- string
A person¡¯s height -- double
A person¡¯s age -- int
A person¡¯s gender (Male, Female, Prefer Not To Answer) --enum
A person¡¯s salary --decimal
A book¡¯s ISBN -- string
A book¡¯s price -- decimal
A book¡¯s shipping weight -- double
A country¡¯s population -- long
The number of stars in the universe -- Big int
The number of employees in each of the small or medium businesses in the
United Kingdom (up to about 50,000 employees per business) -- int

2. What are the difference between value type and reference type variables? What is boxing and unboxing?
1.Value type will hold the value while reference type will hold the memory address or reference for this value. 
2. Value types are stored in stack memory while reference types are stored in heap memory. 
3. Value type will not be collected by the garbage collector but reference type will be collected by the garbage collector. 
4. The value type can be created by struct or enum while reference type will be created by class, interface, delegate or array. 
5. Value type can not accept null values whereas reference type can accept null values. 

Boxing: Conversion of the value type to the reference type/object type 
Unboxing: Conversion of the reference type to the value type

3. What is meant by the terms managed resource and unmanaged resource in .NET
Managed Resource:
Resources managed by the .NET runtime (CLR), such as memory allocated for objects.Automatically handled by the Garbage Collector.
Unmanaged Resource:
Resources not managed by the CLR and require explicit handling.

4. Whats the purpose of Garbage Collector in .NET?
The Garbage Collector (GC) is responsible for:
Automatically managing memory by reclaiming unused objects.
Preventing memory leaks by deallocating memory for objects no longer referenced.
Improving application performance by optimizing memory usage.
Relieving developers from the need to manually free memory, thus reducing the risk of errors such as dangling pointers or double frees.

"Controlling Flow and Converting Types"
1. What happens when you divide an int variable by 0?
It would throw System.DivideByZeroException

2. What happens when you divide a double variable by 0?
It does not throw an exception. Instead, it results in:
Infinity if the value is positive.
-Infinity if the value is negative.
NaN (Not a Number) if you are dividing.

3. What happens when you overflow an int variable, that is, set it to a value beyond its
range?

Overflowing an int variable results in a value that wraps around to the negative or positive limit of the int type.
4. What is the difference between x = y++; and x = ++y;?
x = y++ is called post-increment.The value of y is assigned to x first, then y is incremented.
x = ++y is called pre-increment.The value of y is incremented first, then the new value of y is assigned to x.

5. What is the difference between break, continue, and return when used inside a loop
statement?
break:
Terminates the entire loop immediately and moves to the next statement after the loop.
continue:
Skips the current iteration of the loop and moves to the next iteration.
return:
Immediately exits the method where the loop is contained, returning control to the caller.

6. What are the three parts of a for statement and which of them are required?
Initialization (e.g., int i = 0)
Condition (e.g., i < 10)
Iteration (e.g., i++)
All three parts are optional.

7. What is the difference between the = and == operators?
= is the assignment operator.
It is used to assign a value to a variable.
== is the equality operator.
It is used to compare two values for equality.

8. Does the following statement compile? for ( ; true; ) ;
Yes, this statement compiles.
It creates an infinite loop that does nothing because the condition is always true and there is no other part of statement.

9. What does the underscore _ represent in a switch expression?
In a switch expression, the underscore (_) is used as the default pattern.
It matches any value that hasn't been explicitly matched by the previous cases.

10. What interface must an object implement to be enumerated over by using the foreach statement
An object must implement the IEnumerable interface (or the generic version IEnumerable<T>) to be enumerated over by using the foreach statement.



"Arrays and Strings":
1. When to use String vs. StringBuilder in C# ?
String: 
Use String when you need to create or manipulate strings that don't require frequent modifications. Since strings are immutable in C#, every modification creates a new string in memory, which can be inefficient if you perform many concatenations.

StringBuilder: 
Use StringBuilder when you need to modify a string frequently, such as in loops or when performing numerous concatenations. StringBuilder is mutable, meaning it can be modified without creating new instances, making it more memory-efficient for repeated changes.

2. What is the base class for all arrays in C#?
System.Array.

3. How do you sort an array in C#?
use the Array.Sort() method
4. What property of an array object can be used to get the total number of elements in an array?
The Length property of an array can be used to get the total number of elements in an array.

5. Can you store multiple data types in System.Array?
No, System.Array is a strongly-typed collection, meaning all elements in an array must be of the same type. 

6. What¡¯s the difference between the System.Array.CopyTo() and System.Array.Clone()?
The key difference is that CopyTo() copies elements to an existing array, while Clone() creates a new array.



"OOP" section:
1. What are the six combinations of access modifier keywords and what do they do? 
public: Accessible from any other class.
private: Accessible only within the class it is declared in.
protected: Accessible within the class and by derived classes.
internal: Accessible within the same assembly.
protected internal: Accessible within the same assembly or by derived classes.
private protected: Accessible within the same class or by derived classes in the same assembly.

2.What is the difference between the static, const, and readonly keywords when applied to a type member?
static: Belongs to the type rather than an instance; shared among all instances.
const: Compile-time constant; its value must be assigned at declaration and cannot change.
readonly: Runtime constant; can be assigned at declaration or in the constructor

3. What does a constructor do?
A constructor initializes an object of a class. It is a special method with the same name as the class and no return type.
4. Why is the partial keyword useful?
The partial keyword allows a class, struct, or interface to be split across multiple files. This is helpful for separating auto-generated code and user-defined code.

5. What is a tuple?
A tuple is a data structure that holds multiple values, which can be of different types. 

6. What does the C# record keyword do?
The record keyword creates a reference type with built-in functionality for immutability and value-based equality.

7. What does overloading and overriding mean?
Overloading: Defining multiple methods with the same name but different parameters in the same class.
Overriding: Providing a new implementation of a base class method in a derived class using the override keyword.

8. What is the difference between a field and a property?
Field: A variable that holds data.
Property: Provides controlled access to fields with get and set accessors.

9. How do you make a method parameter optional?
We can assign a default value to the parameter

10. What is an interface and how is it different from abstract class?
Interface: Defines a contract with no implementation. Classes implementing it must provide implementations.
Abstract Class: Can have both abstract methods (no implementation) and concrete methods (with implementation).

11. What accessibility level are members of an interface?
Members of an interface are public by default and cannot have other access modifiers.

12. True: Polymorphism allows derived classes to provide different implementations of the same method.
13. True: The override keyword is used to indicate that a method in a derived class is providing its own implementation of a method.
14. True: The new keyword is used to indicate that a method in a derived class is providing its own implementation of a method.
15. False: Abstract methods can be used in a normal (non-abstract) class. 
16. True: Normal (non-abstract) methods can be used in an abstract class. 
17. True: Derived classes can override methods that were virtual in the base class. 
18. True: Derived classes can override methods that were abstract in the base class. 
19. False: In a derived class, you can override a method that was neither virtual non abstract in the base class.
20. False: A class that implements an interface does not have to provide an implementation for all of the members of the interface.
21. True: A class that implements an interface is allowed to have other members that aren¡¯t defined in the interface.
22. False: A class can have more than one base class.
23. True: A class can implement more than one interface




Generics:
1. Describe the problem generics address.
Generics address the problem of type safety and code reusability by allowing classes, methods, and interfaces to operate on a specified type without requiring the explicit declaration of data types.

2. How would you create a list of strings, using the generic List class?
Use List<>  like:
List<string> stringList = new List<string>();

3. How many generic type parameters does the Dictionary class have?
The Dictionary class has two generic type parameters: one for the key and one for the value.

4. False: When a generic class has multiple type parameters, they must all match.

5. What method is used to add items to a List object?
The Add method is used like : myList.Add("item");

6. Name two methods that cause items to be removed from a List.
Remove and RemoveAt

7. How do you indicate that a class has a generic type parameter?
By using angle brackets (<T>) after the class name.

8. False: Generic classes can only have one generic type parameter.

9. True: Generic type constraints limit what can be used for the generic type.
10. True: Constraints let you use the methods of the thing you are constraining to